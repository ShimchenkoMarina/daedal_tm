# Copyright (C) Eta Scale AB. Licensed under the Eta Scale Open Source License. See the LICENSE file for details.

######
# Makefile for DAE Code (latest updated October 2016).
# 

include $(LEVEL)/common/Makefile.environment

######
# Environment
#

# LLVM tools
LINK=$(LLVM_BIN)/llvm-link
OPT=$(LLVM_BIN)/opt
LLC=$(LLVM_BIN)/llc
CLANG=$(LLVM_BIN)/clang 
CLANGCPP=$(LLVM_BIN)/clang++
# -O3 deliberately not added to CFLAGS in order to generate unoptimized .ll files
CFLAGS += 
CFLAGS += -mrtm -Wno-override-module
# Enable optimizations in the final step -O3
CXXFLAGS += 
CXXFLAGS += -mrtm -Wno-override-module

#DVFS_FLAGS=$(COMPILER_LIB)/libDAE_prof_ST.a -lcpufreq

# DAE Marking
DAE_MARKER='__kernel__'

######
# Helper definitions
#

# Helper to generate prerequisites of rules
get_O0_objects=$$(addprefix $(BINDIR)/, $$(addsuffix .V0.ll, $$(basename $$(SRCS))))
get_O1_objects=$$(addprefix $(BINDIR)/, $$(addsuffix .$(OPT_SUFFIX).V1.ll, $$(basename $$(SRCS))))
get_O3_objects=$$(addprefix $(BINDIR)/, $$(addsuffix .$(PASS_SUFFIX).$(OPT_SUFFIX).V2.ll, $$(basename $$(SRCS))))
get_marked_files=$$(shell grep -sl "__kernel__" $(BINDIR)/*.marked.ll)
get_O4_objects=$$(addprefix $(BINDIR)/, $$(addsuffix .$(DAE_SUFFIX).V3.ll, $$(basename $$(SRCS))))

# Debugging purposes: keep all generated ll files
.PRECIOUS: %.ll
.PHONY: $(get_marked_files)
.SECONDARY:

.SECONDEXPANSION:

# Create marked files first (marked whether to decouple or not), then
# evaluate how to build the targets
all: perf libs
	$(MAKE) $(TARGETS)

libs: $(SRCS_LIBS)
ifdef SRCS_LIBS
	$(MAKE) -C $(LIB_DIR)
endif

perf:
	$(MAKE) PERF_TOOL=$(PERF_COUNTERS_TOOL) -C $(LIB_PERF)

$(BINDIR)/$(BENCHMARK).$(GCC_SUFFIX).out: $(BINDIR)/$(BENCHMARK).out
	gcc -O3 $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(DVFS_FLAGS) -o $@

$(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX).V0: $(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX).V0.ll
	$(CLANGCPP) -O3 $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) -o $@

$(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX).V1: $(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX).V1.ll
	$(CLANGCPP) -O3 $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(DVFS_FLAGS) -o $@

$(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX).V2: $(BINDIR)/$(BENCHMARK).$(PASS_SUFFIX).$(ORIGINAL_SUFFIX).V2.ll
	$(CLANGCPP) -O3 $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(DVFS_FLAGS) -o $@

$(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX).V3: $(BINDIR)/$(BENCHMARK).$(DAE_SUFFIX).$(ORIGINAL_SUFFIX).V3.ll $(BINDIR)/$(BENCHMARK).GV_DAE.ll
	$(CLANGCPP) -O3 $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(DVFS_FLAGS) -o $@

# Printing stats introduces an overhead. For gathering performance
# numbers, stats should be disabled to get the correct execution time
# (fair for all versions).
$(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX).V0.ll: $(get_O0_objects) $(LIB_LLS)
	$(LINK) -S -o $@ $^

$(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX).V1.ll: $(get_O1_objects) $(LIB_LLS)
	$(LINK)  -S -o $@ $^

$(BINDIR)/$(BENCHMARK).$(PASS_SUFFIX).$(ORIGINAL_SUFFIX).V2.ll: $(get_O3_objects) $(LIB_LLS)
	$(LINK) -S -o $@ $^

$(BINDIR)/$(BENCHMARK).$(DAE_SUFFIX).$(ORIGINAL_SUFFIX).V3.ll: $(get_O4_objects) $(LIB_LLS)
	$(LINK) -S -o $@ $^

$(BINDIR)/$(BENCHMARK).out: $(get_gcc_objects) $(LIB_LLS)
	gcc -o $@ $^


$(BINDIR)/$(BENCHMARK).GV_DAE.ll: $(BINDIR)/DAE-header.ll $(BINDIR)/Globals.ll
	cat $^ > $@

$(BINDIR)/DAE-header.ll: $(get_marked_files)
ifdef <
	head -n 3 $< | tail -n -2 > $@
else
	touch $@
endif

$(BINDIR)/Globals.ll: $(get_marked_files)
	touch Globals.ll
	mv Globals.ll $(BINDIR)

# General object rules
#
#Related to gcc
$(BINDIR)/%.o: %.c
	mkdir -p $(BINDIR)/$(shell dirname $^)
	gcc -O3  -pthread -DHTM -DLIST_NO_DUPLICATES -DCHUNK_STEP1=12 -mrtm -Wno-override-module -I $(LIB_DIR)/lib $^  -o $@
#related to V0 version
#Simply converst .c to .ll with clang
$(BINDIR)/%.V0.ll: %.c
	mkdir -p $(BINDIR)/$(shell dirname $^)
	$(CLANG) -O3 $(CFLAGS) -I $(LIB_DIR)/lib $^ -S -emit-llvm -o $@
#Related to V1 version
#Two times -O3 optimizations
$(BINDIR)/%.V1.ll: %.c
	mkdir -p $(BINDIR)/$(shell dirname $^)
	$(CLANG) -O3 $(CFLAGS) -I $(LIB_DIR)/lib $^ -S -emit-llvm -o $@

$(BINDIR)/%.$(OPT_SUFFIX).V1.ll: $(BINDIR)/%.V1.ll
	$(OPT) -O3 $^ -S -o $@

#Related to V2 version
#Two times -03 optimization + TM pass
$(BINDIR)/%.V2.ll: %.c
	mkdir -p $(BINDIR)/$(shell dirname $^)
	$(CLANG) -O3 $(CFLAGS) -I $(LIB_DIR)/lib $^ -S -emit-llvm -o $@

$(BINDIR)/%.$(OPT_SUFFIX).V2.ll: $(BINDIR)/%.V2.ll
	$(OPT) -O3 $^ -S -o $@

$(BINDIR)/%.$(PASS_SUFFIX).$(OPT_SUFFIX).V2.ll: $(BINDIR)/%.$(OPT_SUFFIX).V2.ll
	$(OPT) -stats -load $(PASS_DIR)/$(PASS_NAME) $(PASS_FLAGS) $^ -S -o $@

#Related to V3 version
#Two times -03 + DAE pass
$(BINDIR)/%.V3.ll: %.c
	mkdir -p $(BINDIR)/$(shell dirname $^)
	$(CLANG) -O3 $(CFLAGS) -I $(LIB_DIR)/lib $^ -S -emit-llvm -o $@

$(BINDIR)/%.marked.ll: $(BINDIR)/%.V3.ll
	$(OPT) -S -load $(COMPILER_LIB)/libMarkLoopsToTransform.so \
	-mark-loops -require-delinquent=false -bench-name $(BENCHMARK) \
	-o $@ $<; \

$(BINDIR)/%.extracted.ll: $(BINDIR)/%.marked.ll
	-$(OPT) -S -loop-simplify  -licm \
	-load $(COMPILER_LIB)/LibTMLoopExtract.so -aggregate-extracted-args -tm-loop-extract -is-dae -bench-name $(BENCHMARK) -mem2reg -o $@ $<



clean:
	rm -f *.o $(BINDIR)/* && $(MAKE) -C $(LIB_DIR) clean
